@model Gestreino.Models.Users
@using Gestreino.Classes
@{
    Layout = null;
}<div class="card-header card-reader-radius bg-primary-pickled-bluewood">
    <h3 class="text-white mb-0">@ViewBag.Action utilizador</h3>
</div>
<div class="modal-body">
    <div class="row">
        <div class="col-lg-12">
            <div class="handle-error alert alert-accent"
                 role="alert" style="display:none;">
                <div class="d-flex flex-wrap align-items-start">
                    <div class="mr-8pt">
                        <i class="fa-solid fa-shield-halved"></i>&nbsp;
                    </div>
                    <div class="flex"
                         style="min-width: 180px">
                        <span class="text-black-100">
                            <strong>Atenção!</strong> <span class="handle-error-message"></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (ViewBag.Action == "Adicionar")
    {
        using (Ajax.BeginForm("newuser", "administration", new AjaxOptions { HttpMethod = "POST", OnFailure = "handleFailure", OnSuccess = "handleSuccess", UpdateTargetId = "" }))
        {
            @Html.AntiForgeryToken()
            <p>  <span><i class="fa fa-info-circle"></i> Os campos a vermelho são de caráter obrigatório!</span></p>

            <div class="row">
                @Html.LabelFor(m => m.Login, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Login, new { @class = "form-control form-control-sm", required = "", maxlength = "32" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Name, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control form-control-sm", required = "" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Email, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control form-control-sm", required = "", maxlength = "64", type = "email" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Phone, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Phone, new { @class = "form-control form-control-sm", type = "number", required = "" })
                </div>
            </div>
            <div class="row">
                <label class="col-sm-2 col-form-label text-right"></label>
                <div class="col-md-10">
                    <div class="custom-controls-stacked">
                        <div class="custom-control custom-checkbox">
                            <input id="isAutomaticPasswordEmail" type="checkbox" class="custom-control-input">
                            <label for="isAutomaticPasswordEmail" class="custom-control-label">
                                Gerar senha
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row GenPasswordRow" style="display:none">
                <label class="col-sm-2 col-form-label text-right"></label>
                <div class="col-sm-6">
                    <input type="text" class="form-control form-control-sm" placeholder="Senha gerada" id="GenPassword" readonly="">
                </div>
                <div class="col-sm-3 btn-group">
                    <button type="button" class="btn btn-sm btn-light" onclick="ShufflePassword()" title="Shuffle"><i class="fa fa-random"></i></button>
                    <button type="button" class="btn btn-sm btn-light" onclick="copyPassword()" title="Copiar senha"><i class="fa fa-copy"></i></button>
                </div>
            </div>
            <div class="row mt-1">
                @Html.LabelFor(m => m.Password, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control form-control-sm", required = "" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control form-control-sm", required = "" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Status, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-6">
                    @Html.DropDownListFor(m => Model.Status, Enum.GetValues(typeof(SelectValues.Status)).Cast<int>().Select(e => new SelectListItem() { Text = Enum.GetName(typeof(SelectValues.Status), e), Value = e.ToString() }), new { @class = "form-control form-control-sm" })
                </div>
            </div>
            <div class="mt-1">
                <button type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary btn-sm" id="BtnSubmit">Submeter</button>
            </div>
        }
    }
    @if (ViewBag.Action == "Editar")
    {
        using (Ajax.BeginForm("updateuser", "administration", new AjaxOptions { HttpMethod = "POST", OnFailure = "handleFailure", OnSuccess = "handleSuccess", UpdateTargetId = "" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.PesId)
            <p>  <span><i class="fa fa-info-circle"></i> Os campos a vermelho são de caráter obrigatório!</span></p>

            <div class="row">
                @Html.LabelFor(m => m.Login, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Login, new { @class = "form-control form-control-sm", required = "", maxlength = "32" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Email, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control form-control-sm", required = "", maxlength = "64", type = "email" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Phone, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Phone, new { @class = "form-control form-control-sm", type = "number", required = "" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Status, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-6">
                    @Html.DropDownListFor(m => Model.Status, Enum.GetValues(typeof(SelectValues.Status)).Cast<int>().Select(e => new SelectListItem() { Text = Enum.GetName(typeof(SelectValues.Status), e), Value = e.ToString() }), new { @class = "form-control form-control-sm" })
                </div>
            </div>
            <div class="mt-1">
                <button type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary btn-sm" id="BtnSubmit">Submeter</button>
            </div>
        }
    }
    @if (ViewBag.Action == "AlterarSenha")
    {
        using (Ajax.BeginForm("updatepassword", "administration", new AjaxOptions { HttpMethod = "POST", OnFailure = "handleFailure", OnSuccess = "handleSuccess", UpdateTargetId = "" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.Email)
            @Html.HiddenFor(m => m.Login)
            <p>  <span><i class="fa fa-info-circle"></i> Os campos a vermelho são de caráter obrigatório!</span></p>
            <div class="row">
                <label class="col-sm-2 col-form-label text-right"></label>
                <div class="col-md-10">
                    <div class="custom-controls-stacked">
                        <div class="custom-control custom-checkbox">
                            <input id="isAutomaticPasswordEmail" type="checkbox" class="custom-control-input">
                            <label for="isAutomaticPasswordEmail" class="custom-control-label">
                                Gerar senha
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row GenPasswordRow" style="display:none">
                <label class="col-sm-2 col-form-label text-right"></label>
                <div class="col-sm-6">
                    <input type="text" class="form-control form-control-sm" placeholder="Senha gerada" id="GenPassword" readonly="">
                </div>
                <div class="col-sm-3 btn-group">
                    <button type="button" class="btn btn-sm btn-light" onclick="ShufflePassword()" title="Shuffle"><i class="fa fa-random"></i></button>
                    <button type="button" class="btn btn-sm btn-light" onclick="copyPassword()" title="Copiar senha"><i class="fa fa-copy"></i></button>
                </div>
            </div>
            <div class="row mt-1">
                @Html.LabelFor(m => m.Password, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control form-control-sm", required = "" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 col-form-label required" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control form-control-sm", required = "" })
                </div>
            </div>
            <div class="mt-1">
                <button type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary btn-sm" id="BtnSubmit">Submeter</button>
            </div>
        }
    }
    @if (ViewBag.Action == "LimparLogs")
    {
        using (Ajax.BeginForm("CleanUserLogs", "administration", new AjaxOptions { HttpMethod = "POST", OnFailure = "handleFailure", OnSuccess = "handleSuccess", UpdateTargetId = "" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)
            <p>Deseja limpar os logs de sessão?</p>
            <div class="mt-1">
                <button type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary btn-sm" id="BtnSubmit">Submeter</button>
            </div>
        }
    }
</div>